import StyledLines, { StyledLinesProps } from "./MapLine.style";
import { motion } from "framer-motion";
import { useEffect, useRef, useState } from "react";
import Filter from "./Filter";

const lines: Array<string> = [
  "M25.7422 35.5789C25.7422 39.9197 27.5945 42.9675 29.2127 46.9817C35.1919 61.8148 46.6179 73.1338 55.0342 86.4371C70.7455 111.271 90.3208 134.531 116.056 149.524C144.102 165.865 173.027 173.018 205.378 173.859C215.851 174.131 229.171 175.926 239.297 172.743C244.22 171.196 246.887 162.349 247.767 157.953C249.403 149.773 248.38 141.902 244.379 134.899C241.531 129.915 221.824 143.428 219.838 144.897C208.413 153.349 202.872 169.059 203.56 182.824C204.376 199.144 214.437 214.828 226.366 225.502C232.913 231.36 240.691 235.824 248.51 239.755C251.313 241.165 254.518 243.061 257.765 243.061C264.379 243.061 272.167 239.542 277.43 235.789C286.629 229.23 288.324 213.676 289.659 203.564C291.327 190.938 289.671 178.328 292.014 165.761C294.611 151.833 299.59 138.58 305.69 125.81C312.109 112.371 319.471 94.8876 331.966 85.9C341.615 78.9594 357.436 81.1343 368.694 81.7686C378.555 82.3241 382.319 88.7765 386.79 96.7244C389.695 101.889 392.913 107.759 394.268 113.581C396.619 123.685 395.812 135.846 394.681 146.054C392.516 165.6 388.611 185.141 385.84 204.638C382.93 225.11 377.707 245.448 371.628 265.205C368.607 275.022 366.992 282.717 360.225 290.737C354.667 297.325 345.641 306.064 336.593 307.181C323.211 308.833 308.88 308.103 295.444 307.594C275.317 306.831 255.245 303.183 235.537 299.207C221.748 296.425 205.696 292.5 194.223 283.962C186.155 277.958 178.385 272.098 171.169 265.04C157.256 251.428 142.18 239.813 126.632 228.229C117.857 221.69 109.689 216.289 98.6211 216.289C88.9596 216.289 70.1547 219.105 68.8746 231.906C68.7026 233.626 67.4561 235.493 66.8089 237.111C66.2033 238.625 66.6436 241.148 66.6436 242.771C66.6436 248.61 65.3668 256.252 67.222 261.817C68.1236 264.522 69.9917 267.396 72.1798 269.254C78.7964 274.872 84.9033 280.968 92.2173 285.738C101.04 291.493 109.998 295.88 119.815 299.62C129.011 303.123 137.582 307.868 146.546 311.808C152.877 314.591 160.029 319.361 164.476 324.698C168.214 329.183 167.782 334.665 167.782 340.15C167.782 349.642 171.484 358.336 173.648 367.459C175.613 375.739 178.811 382.454 182.655 390.14C188.737 402.304 201.016 418.167 215.459 420.424C219.831 421.107 224.347 420.796 228.762 420.796C232.086 420.796 233.082 418.654 235.785 417.077C246.663 410.732 245.758 402.768 247.519 392.206C248.601 385.712 250.725 377.304 254.873 372.003C257.422 368.746 260.33 365.871 262.97 362.79C264.972 360.454 268.632 359.185 270.985 357.006C274.81 353.465 282.721 354.61 287.47 354.61C289.627 354.61 291.843 354.491 293.998 354.651C298.547 354.988 302.577 357.854 306.846 358.328C309.645 358.639 312.483 362.191 313.539 364.567C314.328 366.341 317.899 371.264 319.489 372.292C321.512 373.601 323.292 376.261 325.066 378.035C326.479 379.448 328.252 379.151 330.106 379.151C335.314 379.151 340.566 379.508 345.682 378.407C362.14 374.865 378.523 372.617 393.194 364.112C402.5 358.717 411.982 354.187 420.213 347.132C425.69 342.438 429.26 335.216 432.69 328.995C438.849 317.827 442.717 305.962 446.985 294.043C450.17 285.151 454.441 276.374 456.694 267.188C459.332 256.433 461.48 246.251 462.85 235.293C463.632 229.04 463.759 223.03 463.759 216.743C463.759 213.598 462.43 210.794 462.272 208.108C462.05 204.34 459.263 200.96 458.595 197.284C457.467 191.082 455.272 184.745 453.513 178.527C447.53 157.374 439.84 136.898 435.458 115.357C431.476 95.7758 428.222 77.2895 416.082 60.6155C413.063 56.4684 409.642 48.8518 404.514 46.7338C399.464 44.648 394.338 42.7907 389.104 41.1977C384.651 39.8427 380.295 40.0409 375.676 40.0409C365.465 40.0409 355.711 39.768 345.806 42.6437C337.109 45.1686 328.824 49.4712 320.521 53.0963C311.836 56.8886 302.816 62.9793 293.626 65.1601C287.766 66.5505 279.036 67.2251 273.051 65.9038C268.095 64.8095 264.339 59.4474 261.07 55.9883C255.803 50.4159 250.963 44.2528 245.246 39.132C239.68 34.1457 233.219 31.1528 226.531 28.7207C222.227 27.1556 218.364 26.655 213.847 26.655C204.925 26.655 192.678 24.7148 185.134 30.3733C180.823 33.6063 176.061 36.0548 171.83 39.4625C167.07 43.2976 164.132 50.4041 160.676 55.3273C157.447 59.9257 154.746 66.477 150.347 70.0765C149.11 71.0885 145.889 70.7392 144.315 71.1094C138.337 72.516 129.283 66.7733 123.988 64.9122C118.146 62.8589 111.825 61.2359 106.595 57.8061C101.336 54.3577 97.0495 49.4502 92.3 45.3705C81.8649 36.407 71.6355 26.856 58.7112 21.8625C53.6374 19.9021 51.4078 19.6238 46.5235 21.8625C44.1103 22.9685 36.7008 25.8124 35.2446 28.1423C32.6173 32.346 23.7781 30.5832 21.2803 35.5789",
  "M439.457 35.8032C440.884 41.8719 441.465 48.512 441.731 54.7009C442.301 67.9475 442.606 81.2881 442.606 94.5521C442.606 111.259 444.612 129.579 439.675 145.689C435.669 158.763 430.363 172.168 423.796 184.185C418.558 193.769 410.748 202.254 403.805 210.606C388.726 228.745 374.445 247.637 354.636 260.956C335.205 274.022 313.873 283.393 293.656 294.946C275.421 305.366 256.719 317.7 244.137 334.666C230.736 352.737 230.242 374.465 232.064 396.127C232.454 400.773 232.121 405.741 236.482 408.332C242.383 411.837 247.629 412.297 254.417 412.575C260.36 412.818 266.372 412.691 272.309 413.056C279.954 413.527 287.787 414.791 295.45 414.543C301.796 414.339 308.629 411.416 314.653 409.644C326.05 406.292 335.243 397.092 344.137 389.565C355.254 380.159 368.476 372.489 377.077 360.475C389.691 342.855 390.999 323.728 389.85 302.645C389.179 290.32 386.092 278.098 382.764 266.249C381.418 261.46 379.511 256.468 376.814 252.251C365.233 234.136 352.395 215.563 334.47 203.082C311.839 187.326 284.976 172.647 256.517 176.661C240.52 178.917 224.445 181.091 208.573 184.097C193.308 186.988 178.686 192.503 163.516 195.908C159.399 196.833 154.782 197.133 150.568 197.133C147.931 197.133 144.369 193.701 142.256 192.409C131.475 185.815 122.359 180.56 113.385 171.586C100.954 159.156 92.2533 142.285 82.7636 127.754C74.5436 115.167 66.4615 102.837 59.579 89.434C56.9569 84.3278 20.7509 23.2521 18.5 18",
];

const MapLine2 = () => {
  const [show, setShow] = useState<boolean>(true);
  const [size, setSize] = useState<700 | 500>(700);
  const activeLine = useRef(0);

  //Animate the svg periodically
  useEffect(() => {
    if (!show) {
      setTimeout(() => {
        activeLine.current =
          activeLine.current < lines.length - 1 ? activeLine.current + 1 : 0;
        setShow(true);
      }, 1000);
    }
  }, [show]);

  //Calculate the svg size ratio based on window width
  useEffect(() => {
    function calcSize() {
      if (window.innerWidth > 1400) {
        setSize(700);
      } else {
        setSize(500);
      }
    }

    calcSize();

    // Event listener for window resize
    window.addEventListener("resize", calcSize);

    // Cleanup function to remove event listener on component unmount
    return () => {
      window.removeEventListener("resize", calcSize);
    };
  }, []);

  //Ratio for svg based on the original heart bg img it was drawn on
  const svgWidth = 462;
  const svgHeight = 433;
  const heartWidth = 465;
  const svgRatio = svgHeight / svgWidth;
  const svgImgRatio = svgWidth / heartWidth;

  const svgScaledWidth = svgImgRatio * size;
  const svgScaledHeight = svgRatio * svgScaledWidth;

  return (
    <StyledLines
      size={size}
      width={svgScaledWidth}
      height={svgScaledHeight}
      viewBox="0 0 462 433"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g filter="url(#svg-shadow)">
        {show && (
          <motion.path
            animate={{ pathLength: [0, 1, 1, 0] }}
            transition={{
              delay: 1.8,
              duration: 9,
              type: "tween",
            }}
            onAnimationComplete={() => {
              setShow(false);
            }}
            d={lines[activeLine.current]}
            stroke="#EFCE1E"
            strokeWidth="8"
            strokeLinecap="round"
          />
        )}
      </g>

      <defs>
        <Filter id="svg-shadow" />
      </defs>
    </StyledLines>
  );
};

export default MapLine2;
